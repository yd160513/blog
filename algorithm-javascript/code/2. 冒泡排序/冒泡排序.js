/**
 * 冒泡排序
 * @param {array} list 无序的数字数组
 * @returns list
 * 1. 数组中的第一个和第二个比较，如果第二个比第一个大则两个交换位置，反之顺序保持不变。
 * 2. 数组的第二个和第三个比较，规则同 1。
 * 3. 一直比较到数组的最后一个。
 * 4. 这个时候数组的最后一个肯定是最大的。
 * 5. 然后再从 1 开始循环比较。
 * 6. 再次开始比较的时候因为最后一个已经是最大的了，所以就不需要再次比较了。第一次是最后一个不需要比较，第二次是最后两个不需要比较...
 */
 function bubbleSort(list) {
  // 一共有多少个元素需要比较，也就是一共要对比多少次
  for (let j = 0; j < list.length - 1; j++) {
    // 外层 for 循环只是告诉有多少个元素要比较，
    // 这里的 for 循环开始比较，
    // - j 的原因是：
    //    当第一次比较完成之后，数组的最后一个肯定是最大的了，所以在下次就不需要比对最后一个了，
    //    第一次是最后一个不需要比较，第二次是最后两个不需要比较...
    //    外层循环的次数就是已经比对过的次数，也就是数组后边不需要比对的个数，所以将其减去
    for (let k = 0; k < list.length - 1 - j; k++) {
      // 如果第一个值比第二个值大的话则交换位置，反之顺序保持不变
      if (list[k] > list[k + 1]) {
        const temp = list[k]
        list[k] = list[k + 1]
        list[k + 1] = temp
      } 
    }
  }
  return list
}
const arr = [2, 8, 4, 5, 9, 0, 1]
console.log(test(arr))
